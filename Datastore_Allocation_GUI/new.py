#!/usr/bin/env python3
class NewDatastore:
    import PySimpleGUI as sg

    def __init__(self, x, y):
        self.request = x
        self.overhead = y
        self.capacity = 0.0
        self.percent = 0.0
        self.total = 0.0
        self.layout = []
        self.event, self.values = [0, 0]
        self.window = []
        self.create_window()

    def get_capacity(self):
        return self.request + self.overhead

    def get_overhead(self):
        return self.overhead

    def get_layout(self):
        datastore_image = ""
        # Build PySimpleGUI window
        self.sg.theme('DarkBlue13')
        self.layout = [
            [self.sg.Frame(layout=[[self.sg.Image(data=datastore_image), self.sg.Text('New Datastore', font=('Helvetica', 20), size=(20, 1))],
            [self.sg.Text('   *Note: Total Requested is the customer\'s request without overhead', font=('Helvetica',
             10))],
            [self.sg.Text('  *Total Requested:', font='Tahoma', size=(20, 1)), self.sg.InputText('0', size=(15, 1)),
             self.sg.Combo(('GiB', 'TiB'), enable_events=True, readonly=True, key='-total-', default_value='GiB')],
            [self.sg.Text('  Overhead Percentage:', font='Tahoma', size=(20, 1)),
             self.sg.Combo(('15%', '20%', '25%'), enable_events=True, readonly=True, key='-percent-',
             default_value='20%')],
            [self.sg.Button('Calculate', font='Tahoma', pad=(15), bind_return_key=True, mouseover_colors='#06193d'),
             self.sg.Button('Exit', mouseover_colors='#06193d', font='Tahoma')],
            [self.sg.Text('_______________________________________________________________________', pad=0)],
            [self.sg.Text(' ')],

            [self.sg.Text(' Capacity:', font='Tahoma', size=(20, 1)),
             self.sg.InputText(size=(15, 1), key='-capacity-', readonly=True, disabled_readonly_background_color='grey',
             text_color='black'),
             self.sg.Combo(('GiB', 'TiB'), enable_events=True, readonly=True, key='-rs-', default_value='GiB')],
            [self.sg.Text(' Overhead:', font='Tahoma', size=(20, 1)),
             self.sg.InputText(size=(15, 1), key='-overhead-', readonly=True, disabled_readonly_background_color='grey',
             text_color='black'),
             self.sg.Combo(('GiB', 'TiB'), enable_events=True, readonly=True, key='-ru-', default_value='GiB')],
            [self.sg.Text('')]], title='', pad=1, relief=self.sg.RELIEF_RAISED)],
        ]

    def validate(self):
        x = self.values[1]
        try:
            x = float(x)
        except:
            return False
        return True

    def create_window(self):
        self.get_layout()
        self.window = self.sg.Window("New Datastore", self.layout, use_custom_titlebar=True, titlebar_icon='', titlebar_background_color='#06193d', grab_anywhere=True)
        # window event loop
        while True:
            self.event, self.values = self.window.read()
            if self.event == self.sg.WIN_CLOSED or self.event == 'Exit':  # Breaks the loop if exit is triggered
                self.window.close()
                break
            if self.event in ('Calculate', None) and (self.validate() is True):
                self.total = float(self.values[1])
                if str(self.values['-total-']) == 'GiB':
                    self.total = self.total*1
                elif str(self.values['-total-']) == 'TiB':
                    self.total = self.total*1024
                if str(self.values['-percent-']) == '15%':
                    self.percent = (self.total - (self.total*.85))/.85
                elif str(self.values['-percent-']) == '20%':
                    self.percent = self.total * 0.25
                elif str(self.values['-percent-']) == '25%':
                    self.percent = self.total * 1/3
                self.capacity = self.total+self.percent

                if str(self.values['-rs-']) == 'GiB':
                    self.window['-capacity-'].update(float(round(self.capacity, 5)))
                elif str(self.values['-rs-']) == 'TiB':
                    self.window['-capacity-'].update(float(round((self.capacity/1024), 5)))
                if str(self.values['-ru-']) == 'GiB':
                    self.window['-overhead-'].update(float(round(self.percent, 5)))
                elif str(self.values['-ru-']) == 'TiB':
                    self.window['-overhead-'].update(float(round((self.percent/1024), 5)))
            if self.event in ('Exit', None):
                break


def new():
    NewDatastore(0, 0)


